(*
ProgressReport
==============
This is what's responsible for the in game screen report, often called as
"paint" or HUDProgressReport in WaspLib.

You can easily toggle the usage this on or off by switching the variables:
- `WLSettings.RemoteInput.HUDReport`
- `WLSettings.RemoteInput.Enabled`

.. note:: Keep in mind that ProgressReport requires remote input.
*)
{$DEFINE WL_PROGRESS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
type ProgressReport
~~~~~~~~~~~~~~~~~~~~
Type responsible for handling the HUDProgressReport, also commonly called as "Paint" or InGame/OnScreen Progress Report.
*)
type
  TRSProgressReport = record
    BGImg: TMufasaBitmap;
    ClientImg: TMufasaBitmap;

    TextColor, PadLength: Int32;

    Timer: TTimer;
    UsernameBox: TBox;

    Terminated, IsSetup: Boolean;

    PTimeRunning: ^TStopwatch;
    ProgressArray: TStringArray;
    TopLeft: TPoint;
end;

{$IFNDEF SRL_DISABLE_REMOTEINPUT}
(*
ProgressReport.Terminate
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.Terminate(); static;

Internal method called automatically on termination. This will do things such as free used assetsa and clear the progress report from the game screen.
*)
procedure TRSProgressReport.Terminate();
begin
  if Self.Terminated then //avoids multiple terminations in case the script is chained.
    Exit;

  Self.BGImg.Clear();
  Self.BGImg.Free();

  Self.ClientImg.Clear();
  Self.ClientImg.Free(); //not sure if it needs to be freed?
end;

(*
ProgressReport.Setup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure Self.Setup();  static;

Internal method called when we need to setup Self.
*)
procedure TRSProgressReport.Setup();
begin
  Self.BGImg.Init();
  Self.BGImg.SetName('Progress report background');

  Self.TopLeft := [Chat.Bounds().X1, Chat.Bounds().Y1 - 12];
  if WLSettings.RemoteInput.HUDTransparent then
  begin
    Self.TopLeft.Y -= Chat.Height - 12;
    Self.BGImg.SetSize(Chat.Width(), Chat.Height() + 12);
  end
  else
    Self.BGImg.LoadFromFile({$MACRO CURRENT_DIRECTORY} + 'WaspProgress.png');


  Self.BGImg.setFontAntialiasing(True);

  Self.ClientImg := RSClient.Image();

  Self.ClientImg.Clear();
  Self.ClientImg.SetName('ClientImg');
  Self.ClientImg.setFontAntialiasing(True);
  Self.ClientImg.setFontSize(13);

  if Self.BGImg.GetFonts().Contains('Consolas') then
  begin
    Self.BGImg.setFontName('Consolas');
    Self.ClientImg.setFontName('Consolas');
  end;

  Self.TextColor := $006CFF;
  Self.UsernameBox := Chat.GetDisplayNameBox();

  AddOnTerminate(@Self.Terminate);
end;

(*
ProgressReport.DrawBackground
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure Self.DrawBackground(strArray: TStringArray; FontColor: Int32);  static;

Method that handles drawing the background of our Self.
Usually called internally by Self.Update().
*)
procedure TRSProgressReport.DrawBackground(fontColor: Int32);
var
  hi: String;
begin
  if not Self.IsSetup then
  begin
    Self.BGImg.setFontSize(18);
    Self.BGImg.DrawTextShadow(ScriptName.Before('.simba').Replace('_', ' ').Capitalize(), [Round(Self.BGImg.GetWidth()/2) + 25, 7], FontColor, WLSettings.RemoteInput.HUDTransparent);

    Self.BGImg.setFontSize(14);
    fontColor -= $90A301 - $C8D100;

    hi := Self.ProgressArray[High(Self.ProgressArray)];
    if WLSettings.RemoteInput.HUDTransparent then
      Self.BGImg.DrawTextShadow(hi, [10, 135], fontColor, True)
    else
      Self.BGImg.DrawText(hi, [10, 135], fontColor);
    Self.IsSetup := True;
  end;

  Self.ClientImg.DrawBitmap(Self.BGImg, Self.TopLeft);
end;

(*
ProgressReport.DrawProgress
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure Self.DrawProgress(strArray: TStringArray; fontColor: Int32); static;

Method that handles drawing the text of our Self.
Usually called internally by Self.Update().
*)
procedure TRSProgressReport.DrawProgress(fontColor: Int32);
var
  p, q: TPoint;
  i: Int32;
begin
  p := [Self.TopLeft.X + 10, Self.TopLeft.Y + 40];
  if WLSettings.RemoteInput.HUDTransparent then
    p.Y -= 12;
  q := [Round(Chat.Bounds().Width()/2) + 20, p.Y];

  fontColor -= $C8D100;

  for i := 0 to High(ProgressArray) - 1 do
  begin
    if Frac(i/2) = 0 then
    begin
      ClientImg.DrawTextShadow(ProgressArray[i], p, fontColor, WLSettings.RemoteInput.HUDTransparent);
      p.Y += 20;
    end
    else
    begin
      ClientImg.DrawTextShadow(ProgressArray[i], q, fontColor, WLSettings.RemoteInput.HUDTransparent);
      q.Y += 20;
    end;
  end;

  if WLSettings.RemoteInput.HUDTransparent then
    Self.ClientImg.DrawBoxFilled(Self.UsernameBox, False, $819DAC);
end;

(*
ProgressReport.HideProgress
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure Self.HideProgress();  static;

Used to hide Self.
Usually called internally by Self.Update().
*)
procedure TRSProgressReport.HideProgress();
begin
  Self.IsSetup := False;

  Self.ClientImg.DrawBoxFilled(Self.UsernameBox, False, $819DAC); //Hide username by painting a box with similar color to the chatbox background.
end;

(*
ProgressReport.Update
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure Self.Update(StrArray: TStringArray);  static;

Main method that should be called to used to start and update Self.

To see Self.GetNextCycleColor() in action, which was just a fun experiment,
uncomment `Self.TextColor := Self.GetNextCycleColor(Self.TextColor, 10);`
*)
procedure TRSProgressReport.Update();
begin
  Self.ClientImg.Clear();
  //ProgressReport.TextColor := Self.GetNextCycleColor(ProgressReport.TextColor, 10);
  Self.DrawBackground(Self.TextColor);
  Self.DrawProgress(Self.TextColor);
end;

(*
ProgressReport.Setup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure ProgressReport.Setup(); static; override;

Overriden method to enable ProgressReport.Timer.
This required to be overriden or we couldn't call already declared methods in ProgressReport.CheckButton().

THIS IS DISABLED IN SIMBA1400 SINCE THIS IS ONLY A THING IN SIMBA1500!
*)
procedure TRSProgressReport.Setup(); override;
begin
  inherited;

  //AddOnPause(@Self.HideProgress);
end;

{$ENDIF}
var
  ProgressReport: TRSProgressReport;
