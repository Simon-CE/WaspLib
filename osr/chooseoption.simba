{$DEFINE WL_CHOOSEOPTION_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TRSChooseOption.HasOption(Text: TStringArray; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  if not Self.IsOpen() then
    Exit;

  Choices := Self.GetOptions();

  for I := 0 to High(Choices) do
    for J := 0 to High(Text) do
      if (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        Exit(True);

  if CloseIfNotFound then
  begin
    WaitEx(500, 250);

    Self.Close();
  end;
end;

function TRSChooseOption.HasOption(Text: TStringArray; out Index: Int32; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; overload;
var
  Choices: TRSChooseOption_OptionArray;
  I: Int32;
begin
  if not Self.IsOpen then
    Exit;

  Choices := GetOptions;

  for I := 0 to High(Choices) do
    for Index := 0 to High(Text) do
      if (CaseSensitive and (Text[Index] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[Index]) in Lowercase(Choices[I].Text))) then
        Exit(True);

  if CloseIfNotFound then
  begin
    WaitEx(500, 250);

    Self.Close;
  end;
end;

function TRSChooseOption.HasOption(Text: String; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; overload;
begin
  Result := Self.HasOption([Text], CaseSensitive, CloseIfNotFound);
end;
